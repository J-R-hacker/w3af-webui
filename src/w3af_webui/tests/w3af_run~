
class TestW3afRun(TestCase):
    def setUp(self):
        Scan.objects.all().delete()
        user = User.objects.create_user('svetleo', 'user@example.com', '!')
        user.save()
        self.target = any_model(Target)
        self.scan_task = any_model(ScanTask,
                                   user=user,
                                   status=settings.TASK_STATUS['free'],
                                   target=self.target,
                                   last_updated='0',
                                   cron="",)
        self.scan = Scan.objects.create(
                                scan_task=self.scan_task,
                                data='test',
                                status=settings.SCAN_STATUS['in_process'])

    @patch('w3af_webui.notification.send_mail.notify')
    def test_send_notification(self, mock_send_mail):
        # notification = None
        none_index = max(index for index, value in enumerate(settings.NOTIFY_MODULES)
                         if value['id'] == 'None')
        user = self.scan_task.user
        user.get_profile().notification = none_index # None
        user.save()
        result = send_notification(self.scan)
        self.assertTrue(result)
        self.assertFalse(mock_send_mail.called)
        # fake notification
        user.get_profile().notification = 10000 # fake 
        user.save()
        result = send_notification(self.scan)
        self.assertFalse(result)
        self.assertFalse(mock_send_mail.called)
        # notification = Mail
        mail_index = max(index for index, value in enumerate(settings.NOTIFY_MODULES)
                         if value['id'] == 'Mail')
        user.get_profile().notification = mail_index # Mail
        user.save()
        result = send_notification(self.scan)
        self.assertTrue(result)
        self.assertTrue(mock_send_mail.called)

    def test_get_profile(self):
        scan_profile = any_model(ScanProfile)
        any_model(ProfilesTasks,
                  scan_task=self.scan_task,
                  scan_profile=scan_profile)
        profile_name = get_profile(self.scan_task, '/var/tmp', 'test.html')
        #check that this file exist
        self.assertTrue(os.access(profile_name, os.F_OK))

    def test_get_report_path(self):
        report_path = get_report_path()
        self.assertTrue(os.access(report_path, os.F_OK))

    @patch('w3af_webui.models.Scan.set_task_status_free')
    def test_fail_scan(self, mock_status_free):
        scan = Scan.objects.create(scan_task=self.scan_task, data='test',
                                        status=settings.SCAN_STATUS['in_process'])
        self.assertEqual(scan.status, settings.SCAN_STATUS['in_process'])
        self.assertFalse(mock_status_free.called)
        old_result_message = scan.result_message
        new_result_message = 'test msg'
        fail_scan(scan.id, new_result_message)
        scan = Scan.objects.get(pk=int(scan.id))
        #Assert after call
        self.assertTrue(mock_status_free.called)
        self.assertEqual(scan.status, settings.SCAN_STATUS['fail'])
        self.assertEqual(scan.result_message,
                         old_result_message + new_result_message )

    def test_scan_does_not_exist(self):
        #scan does not exist
        self.assertRaises(Scan.DoesNotExist, call_command,
                          'w3af_run', -1)

    @patch('w3af_webui.management.commands.w3af_run.get_report_path')
    @patch('w3af_webui.management.commands.w3af_run.fail_scan')
    def test_w3af_run_exceptions_raises(self, mock_fail_scan, mock_get_report):
        exc = Exception('Boom!')
        mock_get_report.side_effect = exc
        self.assertRaises(Exception, call_command,
                          'w3af_run', self.scan.id)
        self.scan = Scan.objects.get(pk=int(self.scan.id))
        #self.assertEqual(self.scan.status, settings.SCAN_STATUS['fail'])
        self.assertTrue(mock_fail_scan.called)

    @patch('w3af_webui.management.commands.w3af_run.wait_process_finish')
    @patch('w3af_webui.management.commands.w3af_run.post_finish')
    @patch('w3af_webui.management.commands.w3af_run.send_notification')
    @patch('w3af_webui.management.commands.w3af_run.get_profile')
    @patch('w3af_webui.management.commands.w3af_run.get_report_path')
    def test_w3af_run(self, mock_report_path, mock_get_profile,
                      mock_notify, mock_post_finish, mock_wait_process):
        test_report_path = 'test_report/'
        try:
            os.mkdir(test_report_path)
        except Exception, e:
            print e
        mock_report_path.return_value = test_report_path
        mock_get_profile.return_value = 'test'
        # process terminated with error
        mock_wait_process.return_value = 1 # return error
        call_command('w3af_run', self.scan.id)
        self.assertTrue(mock_wait_process.called)
        self.assertTrue(mock_post_finish.called)
        # process terminated without error
        mock_wait_process.return_value = 0 # return error
        mock_post_finish.reset_mock()
        mock_wait_process.reset_mock()
        call_command('w3af_run', self.scan.id)
        self.assertTrue(mock_wait_process.called)
        self.assertTrue(mock_post_finish.called)
        self.assertTrue(mock_report_path.called)
        self.assertTrue(mock_get_profile.called)
        rmtree(test_report_path)

    @patch('w3af_webui.management.commands.w3af_run.fail_scan')
    def test_post_finish(self, mock_fail_scan):
        # bad returncode
        self.assertFalse(mock_fail_scan.called)
        post_finish(self.scan, -9)
        self.assertTrue(mock_fail_scan.called)
        # returncode ok, but task was stoped by user 
        self.scan.status = settings.SCAN_STATUS['fail']
        self.scan.save()
        mock_fail_scan.reset_mock()
        post_finish(self.scan, 0)
        self.assertFalse(mock_fail_scan.called)
        self.assertEqual(Scan.objects.get(pk=int(self.scan.id)).status,
                         settings.SCAN_STATUS['fail'])
        # ok returncode and status
        mock_fail_scan.reset_mock()
        self.scan.status = settings.SCAN_STATUS['in_process']
        self.scan.save()
        post_finish(self.scan, 0)
        self.assertFalse(mock_fail_scan.called)
        self.assertEqual(Scan.objects.get(pk=int(self.scan.id)).status,
                          settings.SCAN_STATUS['done'])


    def test_save_vulner(self):
        Vulnerability.objects.all().delete
        test_xml = NamedTemporaryFile(dir='/var/tmp',
                                      suffix='.xml')
        test_xml.write(
            '<?xml version="1.0" encoding="UTF-8"?>'
            '<w3afrun start="1334319384">'
            '<vulnerability id="[106]" method="GET" name="test"'
            ' plugin="xss" severity="Medium" >'
            '<description>'
            'test desc'
            '</description>'
            '<httprequest id="106">'
            '<status>'
            'tttttt'
            '</status>'
            '<headers>'
            '<header content="narod.yandex.ru" field="Host"/>'
            '</headers>'
            '</httprequest>'
            '</w3afrun>'
            )
        test_xml.close()
        save_vulnerabilities(self.scan, test_xml.name)
        self.assertEqual(Vulnerability.objects.count(), 1)

    def tearDown(self):
        self.scan.delete()
        self.scan_task.delete()
        self.target.delete()
        Scan.objects.all().delete()


